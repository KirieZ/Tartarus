// Copyright (c) Tartarus Dev Team, licensed under GNU GPL.
// See the LICENSE file
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Common;
using Game.Content;
using Game.Database;
using Game.Network;

namespace Game
{
	/// <summary>
	/// Server main class
	/// </summary>
	public class Server : ServerBase
	{
        static int sqlConType = 0;
        static string sqlConString = string.Empty;

		public static readonly Server Instance = new Server();
		public static string UrlList;

		/// <summary>
		/// Data associated to an user that wants to join the server
		/// sent by the Auth-Server and stored to validate user.
		/// </summary>
		private class PendingUserData
		{
			/// <summary>
			/// 8-bytes One Time Password generated by auth
			/// </summary>
			public long Otp { get; set; }
			
			/// <summary>
			/// Permission level
			/// </summary>
			public byte Permission { get; set; }
			
			/// <summary>
			/// Account ID
			/// </summary>
			public int AccountId { get; set; }
		}

		/// <summary>
		/// Users reported by auth as trying to join, associated by their userId
		/// </summary>
		private static Dictionary<string, PendingUserData> PendingUsers;

		/// <summary>
		/// Loads Configs and ConsoleCommands
		/// </summary>
		public override void Load()
		{
			#region Settings Load

			Config conf = new Config();
			bool error = false;

			if (!conf.Read("conf/game-server.opt"))
				error = true;
			if (!conf.Read("conf/inter-server.opt"))
				error = true;

			if (error)
			{
				ConsoleUtils.ShowError("Fix config errors and restart the server.");
				return;
			}

			Settings.Set(conf.Data);

			// Apply console filters aftere the notice that config files were loaded,
			// so if notice is disabled, it avoids the feel that configs were never loaded.
			if (conf.Data.ContainsKey("console_silent"))
			{
				int consoleSilent;
				if (Int32.TryParse(conf.Data["console_silent"], out consoleSilent))
					ConsoleUtils.SetDisplaySettings((ConsoleUtils.MsgType)consoleSilent);
				else
					ConsoleUtils.ShowError("Invalid 'console_silent' value. Defaulting to 0...");
			}

            #endregion
			
			ConsoleUtils.ShowHeader(Settings.WindowTitle);
			ConsoleCommands.Load(GetConsoleCommands());
        }

		/// <summary>
		/// Server content loading and start up
		/// </summary>
		public override void Start()
		{
			PendingUsers = new Dictionary<string, PendingUserData>();

            // Sets server connection data
            DBManager.SetConnectionData(
                (SqlEngine)Settings.SqlEngine,
                "",
                "Server=" + Settings.SqlGameIp + ";Database=" + Settings.SqlGameDatabase + ";UID=" + Settings.SqlGameUsername + ";PWD=" + Settings.SqlGamePassword + ";Connection Timeout=5;",
                "Server = " + Settings.SqlUserIp + "; Database = " + Settings.SqlUserDatabase + "; UID = " + Settings.SqlUserUsername + "; PWD = " + Settings.SqlUserPassword + "; Connection Timeout = 5;"
            );

            using (DBManager dbManager = new DBManager(Databases.Game))
            {
                if (dbManager.TestConnection())
                    ConsoleUtils.ShowInfo("Game database connection test passed");
                else
                    return;
            }

            using (DBManager dbManager = new DBManager(Databases.User))
            {
                if (dbManager.TestConnection())
                    ConsoleUtils.ShowInfo("User database connection test passed");
                else
                    return;
            }
            #region Content Load

            Statements.Init();
            Arcadia.Init(sqlConType, sqlConString);

            // Pre-process the url list so it doesn't have to be generated everytime.
            StringBuilder urlList = new StringBuilder();
			
			urlList.Append("guild.url|");
			urlList.Append(Settings.GuildUrl);
			urlList.Append("|guild_test_download.url|");
			urlList.Append(Settings.GuildTestDownloadUrl);
			urlList.Append("|web_download|");
			urlList.Append(Settings.WebDownload);
			urlList.Append("|web_download_port|");
			urlList.Append(Settings.WebDownloadPort);
			urlList.Append("|shop.url|");
			urlList.Append(Settings.ShopUrl);
			urlList.Append("|ghelp_url|");
			urlList.Append(Settings.GHelpUrl);
			urlList.Append("|guild_icon_upload.ip|");
			urlList.Append(Settings.GuildIconUploadIp);
			urlList.Append("|guild_icon_upload.port|");
			urlList.Append(Settings.GuildIconUploadPort);
			
			UrlList = urlList.ToString();

            #endregion

            AuthManager.Instance.Start();
			ClientManager.Instance.Start();
		}

		/// <summary>
		/// Returns a dictionary with console commands
		/// </summary>
		/// <returns></returns>
		public static Dictionary<string, ConsoleCommands.Command> GetConsoleCommands()
		{
			Dictionary<string, ConsoleCommands.Command> cmdList = new Dictionary<string, ConsoleCommands.Command>();

			// TODO : Command Calls
			cmdList.Add("Debug.log", new ConsoleCommands.Command("i", null));//ConsoleHelper.Debug_LogToggle));
			cmdList.Add("Debug.log_section", new ConsoleCommands.Command("i", null));// ConsoleHelper.Debug_LogSetFilter));

			cmdList.Add("Debug.level", new ConsoleCommands.Command("i", null));
			cmdList.Add("Debug.trace", new ConsoleCommands.Command("i", null));
			
			cmdList.Add("Debug.folder", new ConsoleCommands.Command("s", null));
			cmdList.Add("Debug.logfileformat", new ConsoleCommands.Command("s", null));
			cmdList.Add("Debug.cprint_debug", new ConsoleCommands.Command("i", null));
			cmdList.Add("Debug.cprint_packet", new ConsoleCommands.Command("i", null));

			cmdList.Add("Debug.internal", new ConsoleCommands.Command("i", null));
			cmdList.Add("Debug.trace_internal", new ConsoleCommands.Command("i", null));

			cmdList.Add("Debug.packets", new ConsoleCommands.Command("i", null));
			//cmdList.Add("Debug.trace_packets", new ConsoleCommands.Command("
			cmdList.Add("Debug.trace_priority", new ConsoleCommands.Command("i", null));

			cmdList.Add("Windows.ShowDebug", new ConsoleCommands.Command("", ConsoleHelper.Windows_ShowDebug));

			cmdList.Add("Test", new ConsoleCommands.Command("s", Test));

			return cmdList;
		}

		private static void Test(object[] args)
		{
			ConsoleUtils.ShowDebug("Test");
			ConsoleUtils.ShowError("Test");
			ConsoleUtils.ShowFatalError("Test");
			ConsoleUtils.ShowInfo("Test");
			ConsoleUtils.ShowNotice("Test");
			ConsoleUtils.ShowSQL("Test");
			ConsoleUtils.ShowStatus("Test");
			ConsoleUtils.ShowWarning("Test");
		}

		/// <summary>
		/// Called when auth answers to server register
		/// </summary>
		/// <param name="result"></param>
		internal void RegisterResult(ushort result)
		{
			switch (result)
			{
				case 0: // Success
					ConsoleUtils.ShowInfo("Connection with Auth-Server stabilished.");
					break;

				case 1: // Duplicated Index
					ConsoleUtils.ShowWarning("Could not stabilish connection to Auth-Server, server index is already in use.");
					break;

				case 2: // Invalid Key
					ConsoleUtils.ShowWarning("Could not stabilish connection to Auth-Server, invalid acceptor key.");
					break;
			}
		}

		/// <summary>
		/// Adds a new pending user
		/// </summary>
		/// <param name="userId">UserId</param>
		/// <param name="key">OTP</param>
		/// <param name="permission">Permission level</param>
		/// <param name="accId">account ID</param>
		internal void PendingUser(string userId, long key, byte permission, int accId)
		{
			PendingUserData data = new PendingUserData()
			{
				Otp = key,
				Permission = permission,
				AccountId = accId
			};

			// if there's already a pending connection for this user, replaces it
			// else adds new
			if (PendingUsers.ContainsKey(userId))
				PendingUsers[userId] = data;
			else
				PendingUsers.Add(userId, data);

			// Informs Auth about the result
			AuthPackets.Instance.JoinResult(userId, 0);
		}

		/// <summary>
		/// Called when a User is trying to join the game-server lobby
		/// from auth-server
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="key"></param>
		internal void OnUserJoin(Player player, string userId, long key)
		{
			PendingUserData data;

			// If there's no pending request for this user, ends
			if (!PendingUsers.TryGetValue(userId, out data))
			{
				player.NetData.ClSocket.Close();
				return;
			}

			if (key != data.Otp)
			{ // Invalid Otp 
				// TODO : is there a proper packet to this?
				player.NetData.ClSocket.Close();
				return;
			}
			else if (data.Permission < Settings.Permission)
			{ // Not allowed to join
				player.NetData.ClSocket.Close();
				return;
			}

			// move data to user
			player.AccountId = data.AccountId;
			player.Permission = data.Permission;

			// Remove from pending users
			PendingUsers.Remove(userId);

			ClientPackets.Instance.Result(player, 0x07D5);
		}
	}
}
